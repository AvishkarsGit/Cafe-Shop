<% layout("layouts/boilerplate.ejs") %>
<body>
  <div>
    <form action="/products/create" method="post" id="product-form">
      <h1 id="title">Add New Product</h1>
      <input
        name="ProductName"
        type="text"
        placeholder="Product Name"
        id="ProductName"
      />
      <input
        name="ProductPrice"
        type="number"
        min="1"
        placeholder="Product Price"
        id="ProductPrice"
      />

      <input
        name="Description"
        type="text"
        placeholder="Discription"
        id="Description"
      />
      <input name="imgUrl" type="text" placeholder="image Url" id="imgUrl" />

      <div class="options">
        <select id="categorySelect">
          <option value="">Select Category</option>
        </select>
      </div>

      <div class="btn-add">
        <button id="add-btn">Add Product</button>
      </div>
    </form>
  </div>
  <script>
    const productForm = document.getElementById("product-form");
    const addBtn = document.getElementById("add-btn");
    const select = document.getElementById("categorySelect");

    appendCategories(select);

    productForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(productForm);

      const selectedValue = select.value;

      const productData = {
        ProductName: formData.get("ProductName"),
        ProductPrice: formData.get("ProductPrice"),
        Description: formData.get("Description"),
        imgUrl: formData.get("imgUrl"),
        category: selectedValue,
      };

      if (productData.ProductName.trim() === "") {
        showErrorAlert("Enter product name");
        return;
      }
      if (productData.ProductPrice.trim() === "") {
        showErrorAlert("Enter product price");
        return;
      }
      if (productData.Description.trim() === "") {
        showErrorAlert("Enter product description");
        return;
      }
      if (productData.imgUrl.trim() === "") {
        showErrorAlert("Enter product img url");
        return;
      }
      if (
        selectedValue.trim() === "" ||
        selectedValue.trim() === "Select Category"
      ) {
        showErrorAlert("Choose one category for product");
        return;
      }
      try {
        const response = await axios.post("/products/create", productData, {
          headers: { "Content-Type": "application/json" },
        });

        if (response.data.success) {
          showSuccessAlert(response.data.message, "Please wait...");
          setTimeout(() => {
            window.location.replace("/");
          }, 5000);
        }
      } catch (error) {
        showErrorAlert(error.response.data.message);
      }
    });

    function appendCategories(select) {
      try {
        axios
          .get("/category/categories")
          .then((response) => {
            const categories = response.data.categories;
            for (let category of categories) {
              const option = document.createElement("option");
              option.value = category.category;
              option.textContent = category.category;
              select.appendChild(option);
            }
          })
          .catch((err) => {
            console.log(err);
          });
      } catch (error) {
        console.log(error);
      }
    }
  </script>
</body>
