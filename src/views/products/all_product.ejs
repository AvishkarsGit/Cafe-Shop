<% layout("layouts/boilerplate.ejs") %>
<body>
  <div class="drop-down-container">
    <div class="drop-down">
      <p>Filter products</p>
      <select name="" id="categorySelect">
        <option value="All">All</option>
      </select>
    </div>
  </div>
  <div id="productContainer" class="card-container">
    <% if (productsByCategory && productsByCategory.length) { %> <% for (let
    category of productsByCategory) { %>
    <!-- filter category first -->
    <% for (let product of category.products) { %>
    <div class="card">
      <img src="<%= product.imgUrl %>" alt="product" />
      <h3><%= product.ProductName %></h3>
      <p><%= product.Description %></p>
      <span>₹ <%= product.ProductPrice %>.00</span>
      <div class="modify">
        <button id="edit" onclick="editProduct('<%= product._id %>')">
          Edit
        </button>
        <button id="delete" onclick="deleteProduct('<%= product._id %>')">
          Delete
        </button>
      </div>
    </div>
    <% } %> <% } %> <% } %>
  </div>

  <script>
    const select = document.getElementById("categorySelect");
    appendCategories(select);

    select.addEventListener("change", async (e) => {
      e.preventDefault();
      const selectedValue = select.value;
      await filteredProducts(selectedValue);
    });

    async function deleteProduct(id) {
      try {
        const response = await axios.get(`/products/delete/${id}`);

        if (response.data.success) {
          showSuccessAlert(response.data.message, "Please wait...");
          setTimeout(() => {
            window.location.reload();
          }, 5000);
        }
      } catch (error) {
        showErrorAlert(error.response.data.message);
      }
    }

    function editProduct(id) {
      location.assign(`/products/edit/${id}`);
    }

    function appendCategories(select) {
      try {
        axios
          .get("/category/categories")
          .then((response) => {
            const categories = response.data.categories;
            for (let category of categories) {
              const option = document.createElement("option");
              option.value = category.category;
              option.textContent = category.category;
              select.appendChild(option);
            }
          })
          .catch((err) => {
            console.log(err);
          });
      } catch (error) {
        console.log(error);
      }
    }

    async function filteredProducts(selectedValue) {
      try {
        if (selectedValue === "All") {
          window.location.reload();
        } else {
          const response = await axios.get(`/products/${selectedValue}`);

          if (response.data.success) {
            const productContainerDiv =
              document.getElementById("productContainer");
            productContainerDiv.innerHTML = "";

            const products = response.data.product;
            for (let product of products) {
              const productCard = `
              <div class="card">
                <img src="${product.imgUrl}" alt="product" />
                <h3>${product.ProductName}</h3>
                <p>${product.Description}</p>
                <span>₹ ${product.ProductPrice}.00</span>
                <div class="modify">
                  <button id="edit" onclick="editProduct('${product._id}')">
                    Edit
                  </button>
                  <button id="delete" onclick="deleteProduct('${product._id}')">
                    Delete
                  </button>
                </div>
              </div>`;

              productContainerDiv.innerHTML += productCard;
            }
          }
        }
      } catch (error) {
        showErrorAlert(response.data.error.message);
      }
    }
  </script>
</body>
